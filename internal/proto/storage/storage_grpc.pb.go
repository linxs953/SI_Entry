// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: storage.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Storage_CreateTask_FullMethodName         = "/storage.Storage/CreateTask"
	Storage_GetTask_FullMethodName            = "/storage.Storage/GetTask"
	Storage_UpdateTask_FullMethodName         = "/storage.Storage/UpdateTask"
	Storage_DeleteTask_FullMethodName         = "/storage.Storage/DeleteTask"
	Storage_ListTasks_FullMethodName          = "/storage.Storage/ListTasks"
	Storage_ExecuteTask_FullMethodName        = "/storage.Storage/ExecuteTask"
	Storage_GetReport_FullMethodName          = "/storage.Storage/GetReport"
	Storage_ListReports_FullMethodName        = "/storage.Storage/ListReports"
	Storage_DeleteReport_FullMethodName       = "/storage.Storage/DeleteReport"
	Storage_CreateTestData_FullMethodName     = "/storage.Storage/CreateTestData"
	Storage_GetTestData_FullMethodName        = "/storage.Storage/GetTestData"
	Storage_UpdateTestData_FullMethodName     = "/storage.Storage/UpdateTestData"
	Storage_DeleteTestData_FullMethodName     = "/storage.Storage/DeleteTestData"
	Storage_ListTestData_FullMethodName       = "/storage.Storage/ListTestData"
	Storage_CreateSceneConfig_FullMethodName  = "/storage.Storage/CreateSceneConfig"
	Storage_GetSceneConfig_FullMethodName     = "/storage.Storage/GetSceneConfig"
	Storage_UpdateSceneConfig_FullMethodName  = "/storage.Storage/UpdateSceneConfig"
	Storage_DeleteSceneConfig_FullMethodName  = "/storage.Storage/DeleteSceneConfig"
	Storage_ListSceneConfigs_FullMethodName   = "/storage.Storage/ListSceneConfigs"
	Storage_GetInterfaceList_FullMethodName   = "/storage.Storage/GetInterfaceList"
	Storage_GetInterfaceDetail_FullMethodName = "/storage.Storage/GetInterfaceDetail"
	Storage_DeleteInterface_FullMethodName    = "/storage.Storage/DeleteInterface"
	Storage_SyncInterface_FullMethodName      = "/storage.Storage/SyncInterface"
)

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务定义
type StorageClient interface {
	// 任务管理
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListResponse, error)
	// 任务执行
	ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskResponse, error)
	// 测试报告
	GetReport(ctx context.Context, in *GetTestReportRequest, opts ...grpc.CallOption) (*TestReportResponse, error)
	ListReports(ctx context.Context, in *GetTaskReportListRequest, opts ...grpc.CallOption) (*ReportListResponse, error)
	DeleteReport(ctx context.Context, in *GetTestReportRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// 测试数据
	CreateTestData(ctx context.Context, in *CreateTestDataRequest, opts ...grpc.CallOption) (*TestDataResponse, error)
	GetTestData(ctx context.Context, in *GetTestDataRequest, opts ...grpc.CallOption) (*TestDataResponse, error)
	UpdateTestData(ctx context.Context, in *UpdateTestDataRequest, opts ...grpc.CallOption) (*TestDataResponse, error)
	DeleteTestData(ctx context.Context, in *DeleteTestDataRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListTestData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TestDataListResponse, error)
	// 场景配置
	CreateSceneConfig(ctx context.Context, in *CreateSceneConfigRequest, opts ...grpc.CallOption) (*SceneConfigResponse, error)
	GetSceneConfig(ctx context.Context, in *GetSceneConfigRequest, opts ...grpc.CallOption) (*SceneConfigResponse, error)
	UpdateSceneConfig(ctx context.Context, in *UpdateSceneConfigRequest, opts ...grpc.CallOption) (*SceneConfigResponse, error)
	DeleteSceneConfig(ctx context.Context, in *DeleteSceneConfigRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListSceneConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SceneConfigListResponse, error)
	// 接口同步
	GetInterfaceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetInterfaceListResponse, error)
	GetInterfaceDetail(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error)
	DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	SyncInterface(ctx context.Context, in *SyncInterfaceRequest, opts ...grpc.CallOption) (*SyncInterfaceResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, Storage_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, Storage_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, Storage_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Storage_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListTasks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, Storage_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ExecuteTask(ctx context.Context, in *ExecuteTaskRequest, opts ...grpc.CallOption) (*ExecuteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteTaskResponse)
	err := c.cc.Invoke(ctx, Storage_ExecuteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetReport(ctx context.Context, in *GetTestReportRequest, opts ...grpc.CallOption) (*TestReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestReportResponse)
	err := c.cc.Invoke(ctx, Storage_GetReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListReports(ctx context.Context, in *GetTaskReportListRequest, opts ...grpc.CallOption) (*ReportListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportListResponse)
	err := c.cc.Invoke(ctx, Storage_ListReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteReport(ctx context.Context, in *GetTestReportRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Storage_DeleteReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateTestData(ctx context.Context, in *CreateTestDataRequest, opts ...grpc.CallOption) (*TestDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestDataResponse)
	err := c.cc.Invoke(ctx, Storage_CreateTestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetTestData(ctx context.Context, in *GetTestDataRequest, opts ...grpc.CallOption) (*TestDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestDataResponse)
	err := c.cc.Invoke(ctx, Storage_GetTestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateTestData(ctx context.Context, in *UpdateTestDataRequest, opts ...grpc.CallOption) (*TestDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestDataResponse)
	err := c.cc.Invoke(ctx, Storage_UpdateTestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteTestData(ctx context.Context, in *DeleteTestDataRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Storage_DeleteTestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListTestData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TestDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestDataListResponse)
	err := c.cc.Invoke(ctx, Storage_ListTestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) CreateSceneConfig(ctx context.Context, in *CreateSceneConfigRequest, opts ...grpc.CallOption) (*SceneConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SceneConfigResponse)
	err := c.cc.Invoke(ctx, Storage_CreateSceneConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetSceneConfig(ctx context.Context, in *GetSceneConfigRequest, opts ...grpc.CallOption) (*SceneConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SceneConfigResponse)
	err := c.cc.Invoke(ctx, Storage_GetSceneConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) UpdateSceneConfig(ctx context.Context, in *UpdateSceneConfigRequest, opts ...grpc.CallOption) (*SceneConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SceneConfigResponse)
	err := c.cc.Invoke(ctx, Storage_UpdateSceneConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteSceneConfig(ctx context.Context, in *DeleteSceneConfigRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Storage_DeleteSceneConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ListSceneConfigs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SceneConfigListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SceneConfigListResponse)
	err := c.cc.Invoke(ctx, Storage_ListSceneConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetInterfaceList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetInterfaceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterfaceListResponse)
	err := c.cc.Invoke(ctx, Storage_GetInterfaceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetInterfaceDetail(ctx context.Context, in *GetInterfaceRequest, opts ...grpc.CallOption) (*GetInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInterfaceResponse)
	err := c.cc.Invoke(ctx, Storage_GetInterfaceDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, Storage_DeleteInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SyncInterface(ctx context.Context, in *SyncInterfaceRequest, opts ...grpc.CallOption) (*SyncInterfaceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncInterfaceResponse)
	err := c.cc.Invoke(ctx, Storage_SyncInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility.
//
// 服务定义
type StorageServer interface {
	// 任务管理
	CreateTask(context.Context, *CreateTaskRequest) (*TaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*TaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*TaskResponse, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteResponse, error)
	ListTasks(context.Context, *Empty) (*TaskListResponse, error)
	// 任务执行
	ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskResponse, error)
	// 测试报告
	GetReport(context.Context, *GetTestReportRequest) (*TestReportResponse, error)
	ListReports(context.Context, *GetTaskReportListRequest) (*ReportListResponse, error)
	DeleteReport(context.Context, *GetTestReportRequest) (*DeleteResponse, error)
	// 测试数据
	CreateTestData(context.Context, *CreateTestDataRequest) (*TestDataResponse, error)
	GetTestData(context.Context, *GetTestDataRequest) (*TestDataResponse, error)
	UpdateTestData(context.Context, *UpdateTestDataRequest) (*TestDataResponse, error)
	DeleteTestData(context.Context, *DeleteTestDataRequest) (*DeleteResponse, error)
	ListTestData(context.Context, *Empty) (*TestDataListResponse, error)
	// 场景配置
	CreateSceneConfig(context.Context, *CreateSceneConfigRequest) (*SceneConfigResponse, error)
	GetSceneConfig(context.Context, *GetSceneConfigRequest) (*SceneConfigResponse, error)
	UpdateSceneConfig(context.Context, *UpdateSceneConfigRequest) (*SceneConfigResponse, error)
	DeleteSceneConfig(context.Context, *DeleteSceneConfigRequest) (*DeleteResponse, error)
	ListSceneConfigs(context.Context, *Empty) (*SceneConfigListResponse, error)
	// 接口同步
	GetInterfaceList(context.Context, *Empty) (*GetInterfaceListResponse, error)
	GetInterfaceDetail(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error)
	DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteResponse, error)
	SyncInterface(context.Context, *SyncInterfaceRequest) (*SyncInterfaceResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageServer struct{}

func (UnimplementedStorageServer) CreateTask(context.Context, *CreateTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedStorageServer) GetTask(context.Context, *GetTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedStorageServer) UpdateTask(context.Context, *UpdateTaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedStorageServer) DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedStorageServer) ListTasks(context.Context, *Empty) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedStorageServer) ExecuteTask(context.Context, *ExecuteTaskRequest) (*ExecuteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedStorageServer) GetReport(context.Context, *GetTestReportRequest) (*TestReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedStorageServer) ListReports(context.Context, *GetTaskReportListRequest) (*ReportListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedStorageServer) DeleteReport(context.Context, *GetTestReportRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReport not implemented")
}
func (UnimplementedStorageServer) CreateTestData(context.Context, *CreateTestDataRequest) (*TestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestData not implemented")
}
func (UnimplementedStorageServer) GetTestData(context.Context, *GetTestDataRequest) (*TestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestData not implemented")
}
func (UnimplementedStorageServer) UpdateTestData(context.Context, *UpdateTestDataRequest) (*TestDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestData not implemented")
}
func (UnimplementedStorageServer) DeleteTestData(context.Context, *DeleteTestDataRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestData not implemented")
}
func (UnimplementedStorageServer) ListTestData(context.Context, *Empty) (*TestDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestData not implemented")
}
func (UnimplementedStorageServer) CreateSceneConfig(context.Context, *CreateSceneConfigRequest) (*SceneConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSceneConfig not implemented")
}
func (UnimplementedStorageServer) GetSceneConfig(context.Context, *GetSceneConfigRequest) (*SceneConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSceneConfig not implemented")
}
func (UnimplementedStorageServer) UpdateSceneConfig(context.Context, *UpdateSceneConfigRequest) (*SceneConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSceneConfig not implemented")
}
func (UnimplementedStorageServer) DeleteSceneConfig(context.Context, *DeleteSceneConfigRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSceneConfig not implemented")
}
func (UnimplementedStorageServer) ListSceneConfigs(context.Context, *Empty) (*SceneConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSceneConfigs not implemented")
}
func (UnimplementedStorageServer) GetInterfaceList(context.Context, *Empty) (*GetInterfaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceList not implemented")
}
func (UnimplementedStorageServer) GetInterfaceDetail(context.Context, *GetInterfaceRequest) (*GetInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceDetail not implemented")
}
func (UnimplementedStorageServer) DeleteInterface(context.Context, *DeleteInterfaceRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedStorageServer) SyncInterface(context.Context, *SyncInterfaceRequest) (*SyncInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncInterface not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}
func (UnimplementedStorageServer) testEmbeddedByValue()                 {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	// If the following call pancis, it indicates UnimplementedStorageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListTasks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ExecuteTask(ctx, req.(*ExecuteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetReport(ctx, req.(*GetTestReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskReportListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_ListReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListReports(ctx, req.(*GetTaskReportListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_DeleteReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteReport(ctx, req.(*GetTestReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_CreateTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateTestData(ctx, req.(*CreateTestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetTestData(ctx, req.(*GetTestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_UpdateTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateTestData(ctx, req.(*UpdateTestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_DeleteTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteTestData(ctx, req.(*DeleteTestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListTestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListTestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_ListTestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListTestData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_CreateSceneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSceneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).CreateSceneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_CreateSceneConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).CreateSceneConfig(ctx, req.(*CreateSceneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetSceneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSceneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetSceneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetSceneConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetSceneConfig(ctx, req.(*GetSceneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_UpdateSceneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSceneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).UpdateSceneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_UpdateSceneConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).UpdateSceneConfig(ctx, req.(*UpdateSceneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteSceneConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSceneConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteSceneConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_DeleteSceneConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteSceneConfig(ctx, req.(*DeleteSceneConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ListSceneConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ListSceneConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_ListSceneConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ListSceneConfigs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetInterfaceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetInterfaceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetInterfaceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetInterfaceList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetInterfaceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetInterfaceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_GetInterfaceDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetInterfaceDetail(ctx, req.(*GetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_DeleteInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).DeleteInterface(ctx, req.(*DeleteInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SyncInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SyncInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_SyncInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SyncInterface(ctx, req.(*SyncInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _Storage_CreateTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Storage_GetTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _Storage_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _Storage_DeleteTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _Storage_ListTasks_Handler,
		},
		{
			MethodName: "ExecuteTask",
			Handler:    _Storage_ExecuteTask_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _Storage_GetReport_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _Storage_ListReports_Handler,
		},
		{
			MethodName: "DeleteReport",
			Handler:    _Storage_DeleteReport_Handler,
		},
		{
			MethodName: "CreateTestData",
			Handler:    _Storage_CreateTestData_Handler,
		},
		{
			MethodName: "GetTestData",
			Handler:    _Storage_GetTestData_Handler,
		},
		{
			MethodName: "UpdateTestData",
			Handler:    _Storage_UpdateTestData_Handler,
		},
		{
			MethodName: "DeleteTestData",
			Handler:    _Storage_DeleteTestData_Handler,
		},
		{
			MethodName: "ListTestData",
			Handler:    _Storage_ListTestData_Handler,
		},
		{
			MethodName: "CreateSceneConfig",
			Handler:    _Storage_CreateSceneConfig_Handler,
		},
		{
			MethodName: "GetSceneConfig",
			Handler:    _Storage_GetSceneConfig_Handler,
		},
		{
			MethodName: "UpdateSceneConfig",
			Handler:    _Storage_UpdateSceneConfig_Handler,
		},
		{
			MethodName: "DeleteSceneConfig",
			Handler:    _Storage_DeleteSceneConfig_Handler,
		},
		{
			MethodName: "ListSceneConfigs",
			Handler:    _Storage_ListSceneConfigs_Handler,
		},
		{
			MethodName: "GetInterfaceList",
			Handler:    _Storage_GetInterfaceList_Handler,
		},
		{
			MethodName: "GetInterfaceDetail",
			Handler:    _Storage_GetInterfaceDetail_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _Storage_DeleteInterface_Handler,
		},
		{
			MethodName: "SyncInterface",
			Handler:    _Storage_SyncInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
